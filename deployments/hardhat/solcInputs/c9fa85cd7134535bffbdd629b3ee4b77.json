{
  "language": "Solidity",
  "sources": {
    "contracts/Raffle.sol": {
      "content": "/// Raffle\n// Enter the lottery (paying some amount)\n// Pick a random winner (verifiably random)\n// Winner to be selected every x time --> completly automated\n// Chainlink Oracle --> Randomness, Automated Execution (Chainlink Keepers)\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ncontract Raffle {\n    /* State Variables */\n    uint256 private immutable i_entranceFee;\n    address payable[] private s_players;\n\n    /* Events */\n    // The convention for naming events is the inverted order of the function name where it is emitted\n    // So if the function is called `enterRaffle()` the corresponding event will be named `raffleEntered`\n    event RaffleEnter(address indexed player);\n\n    /* Errors */\n    error Raffle_NotEnoughEth();\n\n    constructor(uint256 entranceFee) {\n        i_entranceFee = entranceFee;\n    }\n\n    function enterRaffle() public payable {\n        if (msg.value < i_entranceFee) {\n            revert Raffle_NotEnoughEth();\n        }\n        s_players.push(payable(msg.sender));\n        emit RaffleEnter(msg.sender);\n    }\n\n    function getEntranceFee() public view returns (uint256) {\n        return i_entranceFee;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}